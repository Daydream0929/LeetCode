1. dfs + 记忆化
class Solution {
    const int mod=1000000007;
    int vis[1001][1001]={0};
    int t[1001][1001];
    int dx[3]={-1,0,1};
    int cnt=0;
public:

    int dfs(int x,int steps,int arrLen,int cnt){
        
        if(steps==0){
            if(x==0){
                cnt=1;
                
            }
            else{
                cnt=0;
            }
            vis[steps][x]=1;
            t[steps][x]=cnt;
            return cnt;
        }
        for(int i=0;i<3;i++){
            int a=x+dx[i];
            if(a>=0 && a<arrLen ){
                if(vis[steps-1][a]){
                    cnt=(cnt+t[steps-1][a])%mod;
                }
                else{
                    cnt=(cnt+dfs(a,steps-1,arrLen,0))%mod;
                }
            }

        }
        vis[steps][x]=1;
        t[steps][x]=cnt;
        return cnt;
    }
    

    int numWays(int steps, int arrLen) {
        int maxm=min(1+steps/2,arrLen);
        int res=0;
        res=dfs(0,steps,arrLen,res);
        return res;

    }
    
};



2. DP
class Solution {
public:
    const int mod=1e9+7;
    int numWays(int steps, int arrLen) {
        int maxn=min(steps/2+1,arrLen-1);
        vector<vector<int>> dp(steps+1,vector<int> (maxn+1));
        dp[0][0]=1;
        for(int i=1;i<=steps;i++){
            for(int j=0;j<=maxn;j++){
                dp[i][j]=dp[i-1][j];
                if(j-1>=0){
                    dp[i][j]=(dp[i][j]+dp[i-1][j-1])%mod;
                }
                if(j+1<=maxn){
                    dp[i][j]=(dp[i][j]+dp[i-1][j+1])%mod;
                }
            }
        }
        return dp[steps][0];

    }
};
